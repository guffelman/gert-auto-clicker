name: Build All Platforms

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Qt6
      uses: jurplel/install-qt-action@v4
      with:
        version: '6.6.0'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2019_64'
        modules: ''
        
    - name: Setup MSVC
      uses: microsoft/setup-msbuild@v2
        
    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release
        
    - name: Build Executable  
      run: |
        cd build
        cmake --build . --config Release --parallel
        
    - name: Deploy Qt Dependencies
      run: |
        # Create deployment directory
        mkdir deploy
        copy build\bin\Release\GertAutoClicker.exe deploy\
        
        # Find windeployqt.exe in Qt installation
        $qtPath = $env:QT_ROOT_DIR
        if (-not $qtPath) {
          $qtPath = $env:Qt6_DIR + "\..\..\.."
        }
        $windeployqt = "$qtPath\bin\windeployqt.exe"
        
        echo "Qt path: $qtPath"
        echo "Looking for windeployqt at: $windeployqt"
        
        if (Test-Path $windeployqt) {
          echo "Found windeployqt, deploying Qt dependencies..."
          & $windeployqt --release --no-translations --no-system-d3d-compiler --no-opengl-sw deploy\GertAutoClicker.exe
        } else {
          echo "windeployqt not found, searching in PATH..."
          $windeployqtInPath = Get-Command windeployqt.exe -ErrorAction SilentlyContinue
          if ($windeployqtInPath) {
            echo "Found windeployqt in PATH: $($windeployqtInPath.Source)"
            windeployqt.exe --release --no-translations --no-system-d3d-compiler --no-opengl-sw deploy\GertAutoClicker.exe
          } else {
            echo "ERROR: windeployqt.exe not found!"
            echo "Available environment variables:"
            Get-ChildItem env: | Where-Object {$_.Name -match "Qt|QT"} | Format-Table Name, Value
            exit 1
          }
        }
        
        echo "Deployment complete. Contents:"
        Get-ChildItem deploy -Recurse
        
    - name: Create Portable Package
      run: |
        # Create a zip with all dependencies for true portability
        Compress-Archive -Path deploy\* -DestinationPath GertAutoClicker-Windows-Portable.zip
        
        echo "Package contents:"
        Get-ChildItem GertAutoClicker-Windows-Portable.zip | Select-Object Name, Length
        
    - name: Verify Dependencies
      run: |
        echo "Checking main executable dependencies:"
        if (Get-Command dumpbin -ErrorAction SilentlyContinue) {
          dumpbin /dependents deploy\GertAutoClicker.exe
        } else {
          echo "dumpbin not available, skipping dependency check"
        }
        
    - name: Upload Portable Windows Package
      uses: actions/upload-artifact@v4
      with:
        name: gert-auto-clicker-windows-portable
        path: GertAutoClicker-Windows-Portable.zip

  build-macos:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Qt6
      run: |
        brew update
        brew install qt@6
        echo "/opt/homebrew/opt/qt@6/bin" >> $GITHUB_PATH
        
    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH="$(brew --prefix qt@6)"
        
    - name: Build
      run: |
        cd build
        make -j$(sysctl -n hw.ncpu)
        
    - name: Upload macOS executable
      uses: actions/upload-artifact@v4
      with:
        name: gert-auto-clicker-macos
        path: build/bin/GertAutoClicker

